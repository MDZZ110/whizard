/*
Copyright 2021 The KubeSphere authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/paodin/pkg/api/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlertingRuleLister helps list AlertingRules.
// All objects returned here must be treated as read-only.
type AlertingRuleLister interface {
	// List lists all AlertingRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertingRule, err error)
	// AlertingRules returns an object that can list and get AlertingRules.
	AlertingRules(namespace string) AlertingRuleNamespaceLister
	AlertingRuleListerExpansion
}

// alertingRuleLister implements the AlertingRuleLister interface.
type alertingRuleLister struct {
	indexer cache.Indexer
}

// NewAlertingRuleLister returns a new AlertingRuleLister.
func NewAlertingRuleLister(indexer cache.Indexer) AlertingRuleLister {
	return &alertingRuleLister{indexer: indexer}
}

// List lists all AlertingRules in the indexer.
func (s *alertingRuleLister) List(selector labels.Selector) (ret []*v1alpha1.AlertingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertingRule))
	})
	return ret, err
}

// AlertingRules returns an object that can list and get AlertingRules.
func (s *alertingRuleLister) AlertingRules(namespace string) AlertingRuleNamespaceLister {
	return alertingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlertingRuleNamespaceLister helps list and get AlertingRules.
// All objects returned here must be treated as read-only.
type AlertingRuleNamespaceLister interface {
	// List lists all AlertingRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertingRule, err error)
	// Get retrieves the AlertingRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AlertingRule, error)
	AlertingRuleNamespaceListerExpansion
}

// alertingRuleNamespaceLister implements the AlertingRuleNamespaceLister
// interface.
type alertingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlertingRules in the indexer for a given namespace.
func (s alertingRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlertingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertingRule))
	})
	return ret, err
}

// Get retrieves the AlertingRule from the indexer for a given namespace and name.
func (s alertingRuleNamespaceLister) Get(name string) (*v1alpha1.AlertingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("alertingrule"), name)
	}
	return obj.(*v1alpha1.AlertingRule), nil
}
