/*
Copyright 2021 The KubeSphere authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/paodin/pkg/api/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RulerLister helps list Rulers.
// All objects returned here must be treated as read-only.
type RulerLister interface {
	// List lists all Rulers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ruler, err error)
	// Rulers returns an object that can list and get Rulers.
	Rulers(namespace string) RulerNamespaceLister
	RulerListerExpansion
}

// rulerLister implements the RulerLister interface.
type rulerLister struct {
	indexer cache.Indexer
}

// NewRulerLister returns a new RulerLister.
func NewRulerLister(indexer cache.Indexer) RulerLister {
	return &rulerLister{indexer: indexer}
}

// List lists all Rulers in the indexer.
func (s *rulerLister) List(selector labels.Selector) (ret []*v1alpha1.Ruler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ruler))
	})
	return ret, err
}

// Rulers returns an object that can list and get Rulers.
func (s *rulerLister) Rulers(namespace string) RulerNamespaceLister {
	return rulerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RulerNamespaceLister helps list and get Rulers.
// All objects returned here must be treated as read-only.
type RulerNamespaceLister interface {
	// List lists all Rulers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ruler, err error)
	// Get retrieves the Ruler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ruler, error)
	RulerNamespaceListerExpansion
}

// rulerNamespaceLister implements the RulerNamespaceLister
// interface.
type rulerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Rulers in the indexer for a given namespace.
func (s rulerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ruler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ruler))
	})
	return ret, err
}

// Get retrieves the Ruler from the indexer for a given namespace and name.
func (s rulerNamespaceLister) Get(name string) (*v1alpha1.Ruler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ruler"), name)
	}
	return obj.(*v1alpha1.Ruler), nil
}
