/*
Copyright 2021 The KubeSphere authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/paodin/pkg/api/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CompactLister helps list Compacts.
// All objects returned here must be treated as read-only.
type CompactLister interface {
	// List lists all Compacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Compact, err error)
	// Compacts returns an object that can list and get Compacts.
	Compacts(namespace string) CompactNamespaceLister
	CompactListerExpansion
}

// compactLister implements the CompactLister interface.
type compactLister struct {
	indexer cache.Indexer
}

// NewCompactLister returns a new CompactLister.
func NewCompactLister(indexer cache.Indexer) CompactLister {
	return &compactLister{indexer: indexer}
}

// List lists all Compacts in the indexer.
func (s *compactLister) List(selector labels.Selector) (ret []*v1alpha1.Compact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Compact))
	})
	return ret, err
}

// Compacts returns an object that can list and get Compacts.
func (s *compactLister) Compacts(namespace string) CompactNamespaceLister {
	return compactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CompactNamespaceLister helps list and get Compacts.
// All objects returned here must be treated as read-only.
type CompactNamespaceLister interface {
	// List lists all Compacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Compact, err error)
	// Get retrieves the Compact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Compact, error)
	CompactNamespaceListerExpansion
}

// compactNamespaceLister implements the CompactNamespaceLister
// interface.
type compactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Compacts in the indexer for a given namespace.
func (s compactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Compact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Compact))
	})
	return ret, err
}

// Get retrieves the Compact from the indexer for a given namespace and name.
func (s compactNamespaceLister) Get(name string) (*v1alpha1.Compact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("compact"), name)
	}
	return obj.(*v1alpha1.Compact), nil
}
