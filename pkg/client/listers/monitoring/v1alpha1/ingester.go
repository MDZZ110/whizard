/*
Copyright 2021 The KubeSphere authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/paodin/pkg/api/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngesterLister helps list Ingesters.
// All objects returned here must be treated as read-only.
type IngesterLister interface {
	// List lists all Ingesters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ingester, err error)
	// Ingesters returns an object that can list and get Ingesters.
	Ingesters(namespace string) IngesterNamespaceLister
	IngesterListerExpansion
}

// ingesterLister implements the IngesterLister interface.
type ingesterLister struct {
	indexer cache.Indexer
}

// NewIngesterLister returns a new IngesterLister.
func NewIngesterLister(indexer cache.Indexer) IngesterLister {
	return &ingesterLister{indexer: indexer}
}

// List lists all Ingesters in the indexer.
func (s *ingesterLister) List(selector labels.Selector) (ret []*v1alpha1.Ingester, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ingester))
	})
	return ret, err
}

// Ingesters returns an object that can list and get Ingesters.
func (s *ingesterLister) Ingesters(namespace string) IngesterNamespaceLister {
	return ingesterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngesterNamespaceLister helps list and get Ingesters.
// All objects returned here must be treated as read-only.
type IngesterNamespaceLister interface {
	// List lists all Ingesters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ingester, err error)
	// Get retrieves the Ingester from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ingester, error)
	IngesterNamespaceListerExpansion
}

// ingesterNamespaceLister implements the IngesterNamespaceLister
// interface.
type ingesterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ingesters in the indexer for a given namespace.
func (s ingesterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ingester, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ingester))
	})
	return ret, err
}

// Get retrieves the Ingester from the indexer for a given namespace and name.
func (s ingesterNamespaceLister) Get(name string) (*v1alpha1.Ingester, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ingester"), name)
	}
	return obj.(*v1alpha1.Ingester), nil
}
