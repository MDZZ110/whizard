/*
Copyright 2021 The KubeSphere authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/paodin-monitoring/pkg/api/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThanosLister helps list Thanoses.
// All objects returned here must be treated as read-only.
type ThanosLister interface {
	// List lists all Thanoses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Thanos, err error)
	// Thanoses returns an object that can list and get Thanoses.
	Thanoses(namespace string) ThanosNamespaceLister
	ThanosListerExpansion
}

// thanosLister implements the ThanosLister interface.
type thanosLister struct {
	indexer cache.Indexer
}

// NewThanosLister returns a new ThanosLister.
func NewThanosLister(indexer cache.Indexer) ThanosLister {
	return &thanosLister{indexer: indexer}
}

// List lists all Thanoses in the indexer.
func (s *thanosLister) List(selector labels.Selector) (ret []*v1alpha1.Thanos, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Thanos))
	})
	return ret, err
}

// Thanoses returns an object that can list and get Thanoses.
func (s *thanosLister) Thanoses(namespace string) ThanosNamespaceLister {
	return thanosNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThanosNamespaceLister helps list and get Thanoses.
// All objects returned here must be treated as read-only.
type ThanosNamespaceLister interface {
	// List lists all Thanoses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Thanos, err error)
	// Get retrieves the Thanos from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Thanos, error)
	ThanosNamespaceListerExpansion
}

// thanosNamespaceLister implements the ThanosNamespaceLister
// interface.
type thanosNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Thanoses in the indexer for a given namespace.
func (s thanosNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Thanos, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Thanos))
	})
	return ret, err
}

// Get retrieves the Thanos from the indexer for a given namespace and name.
func (s thanosNamespaceLister) Get(name string) (*v1alpha1.Thanos, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("thanos"), name)
	}
	return obj.(*v1alpha1.Thanos), nil
}
