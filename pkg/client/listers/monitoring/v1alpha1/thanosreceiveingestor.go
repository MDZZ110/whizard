/*
Copyright 2021 The KubeSphere authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubesphere/paodin-monitoring/pkg/api/monitoring/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThanosReceiveIngestorLister helps list ThanosReceiveIngestors.
// All objects returned here must be treated as read-only.
type ThanosReceiveIngestorLister interface {
	// List lists all ThanosReceiveIngestors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThanosReceiveIngestor, err error)
	// ThanosReceiveIngestors returns an object that can list and get ThanosReceiveIngestors.
	ThanosReceiveIngestors(namespace string) ThanosReceiveIngestorNamespaceLister
	ThanosReceiveIngestorListerExpansion
}

// thanosReceiveIngestorLister implements the ThanosReceiveIngestorLister interface.
type thanosReceiveIngestorLister struct {
	indexer cache.Indexer
}

// NewThanosReceiveIngestorLister returns a new ThanosReceiveIngestorLister.
func NewThanosReceiveIngestorLister(indexer cache.Indexer) ThanosReceiveIngestorLister {
	return &thanosReceiveIngestorLister{indexer: indexer}
}

// List lists all ThanosReceiveIngestors in the indexer.
func (s *thanosReceiveIngestorLister) List(selector labels.Selector) (ret []*v1alpha1.ThanosReceiveIngestor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThanosReceiveIngestor))
	})
	return ret, err
}

// ThanosReceiveIngestors returns an object that can list and get ThanosReceiveIngestors.
func (s *thanosReceiveIngestorLister) ThanosReceiveIngestors(namespace string) ThanosReceiveIngestorNamespaceLister {
	return thanosReceiveIngestorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThanosReceiveIngestorNamespaceLister helps list and get ThanosReceiveIngestors.
// All objects returned here must be treated as read-only.
type ThanosReceiveIngestorNamespaceLister interface {
	// List lists all ThanosReceiveIngestors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThanosReceiveIngestor, err error)
	// Get retrieves the ThanosReceiveIngestor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ThanosReceiveIngestor, error)
	ThanosReceiveIngestorNamespaceListerExpansion
}

// thanosReceiveIngestorNamespaceLister implements the ThanosReceiveIngestorNamespaceLister
// interface.
type thanosReceiveIngestorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThanosReceiveIngestors in the indexer for a given namespace.
func (s thanosReceiveIngestorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ThanosReceiveIngestor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThanosReceiveIngestor))
	})
	return ret, err
}

// Get retrieves the ThanosReceiveIngestor from the indexer for a given namespace and name.
func (s thanosReceiveIngestorNamespaceLister) Get(name string) (*v1alpha1.ThanosReceiveIngestor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("thanosreceiveingestor"), name)
	}
	return obj.(*v1alpha1.ThanosReceiveIngestor), nil
}
